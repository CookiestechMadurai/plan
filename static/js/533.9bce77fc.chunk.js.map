{"version":3,"file":"static/js/533.9bce77fc.chunk.js","mappings":"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","sources":["pages/Cart.js","components/Navbar.js"],"sourcesContent":["// src/pages/Cart.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs } from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Navbar from '../components/Navbar';\r\n\r\nconst Cart = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const auth = getAuth();\r\n  const user = auth.currentUser;\r\n  const navigate = useNavigate();\r\n\r\n  const fetchOrders = async () => {\r\n    if (!user) return;\r\n    setLoading(true);\r\n    try {\r\n      const q = query(collection(db, 'placeorder'), where('userid', '==', user.uid));\r\n      const querySnapshot = await getDocs(q);\r\n      const ordersList = querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setOrders(ordersList);\r\n    } catch (err) {\r\n      console.error('Error fetching orders:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOrders();\r\n  }, [user]);\r\n\r\n  const getStatusColor = (status) => {\r\n    if (status === 'Rejected') return { color: 'red' };\r\n    if (status === 'Accepted') return { color: 'green' };\r\n    return {};\r\n  };\r\n\r\n  const handleChatClick = (vendorId, vendorName) => {\r\n    if (!vendorId || !vendorName) return;\r\n    navigate(`/messages?vendorId=${vendorId}&vendorName=${encodeURIComponent(vendorName)}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div style={styles.container}>\r\n        <h2 style={styles.header}>Your Orders</h2>\r\n        {loading ? (\r\n          <p>Loading your orders...</p>\r\n        ) : orders.length === 0 ? (\r\n          <p>No orders found.</p>\r\n        ) : (\r\n          <div style={styles.ordersList}>\r\n            {orders.map((order) => (\r\n              <div key={order.id} style={styles.orderCard}>\r\n                <p><strong>Company Name:</strong> {order.businessname}</p>\r\n                <p><strong>Location:</strong> {order.location}</p>\r\n                <p><strong>Date of Event:</strong> {order.dateofevent}</p>\r\n                <p style={getStatusColor(order.status)}>\r\n                  <strong>Status:</strong> {order.status || 'Pending'}\r\n                </p>\r\n                <button\r\n                  style={styles.chatButton}\r\n                  onClick={() => handleChatClick(order.vendorid || order.businessid, order.businessname)}\r\n                >\r\n                  Chat\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    padding: '1rem',\r\n    maxWidth: '800px',\r\n    margin: '0 auto',\r\n  },\r\n  header: {\r\n    fontSize: '1.8rem',\r\n    marginBottom: '1rem',\r\n    color: '#003f66',\r\n  },\r\n  ordersList: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: '1rem',\r\n  },\r\n  orderCard: {\r\n    padding: '1rem',\r\n    backgroundColor: '#f1f1f1',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\r\n  },\r\n  chatButton: {\r\n    marginTop: '10px',\r\n    padding: '8px 16px',\r\n    backgroundColor: '#003f66',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer',\r\n  },\r\n};\r\n\r\nexport default Cart;\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  FaBars,\n  FaTimes,\n  FaSearch,\n  FaShoppingCart,\n  FaUser,\n  FaEnvelope,\n  FaRobot // AI icon\n} from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, orderBy } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\n\nconst categoriesList = [\n  'Photography', 'Food', 'Music', 'Catering', 'Venue', 'Return Gift',\n  'Travel', 'DJ', 'Cakes & Bakery', 'Decoration', 'Orchestra',\n  'Wedding', 'Beautician', 'Other'\n];\n\nconst Navbar = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [aiBoxOpen, setAiBoxOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n\n  useEffect(() => {\n    if (aiBoxOpen && chatMessages.length === 0) {\n      setChatMessages([{ sender: 'claura', text: 'Hi, welcome this is ms.Claura your ai assistant. Say hi to begin' }]);\n      setChatStep('initial');\n    }\n  }, [aiBoxOpen]);\n  const [userInput, setUserInput] = useState('');\n  const [chatStep, setChatStep] = useState('initial'); // initial, waitingForHi, eventName, categories, budget, results\n  const [eventName, setEventName] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [budget, setBudget] = useState('');\n  const chatEndRef = useRef(null);\n  const navigate = useNavigate();\n  const auth = getAuth();\n  const user = auth.currentUser;\n\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatMessages]);\n\n  const addMessage = (sender, text) => {\n    setChatMessages(prev => [...prev, { sender, text }]);\n  };\n\n  const handleUserInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const delay = ms => new Promise(res => setTimeout(res, ms));\n\n  const handleUserInputSubmit = async (e) => {\n    e.preventDefault();\n    const input = userInput.trim();\n    if (!input) return;\n\n    addMessage('user', input);\n    setUserInput('');\n\n    if (chatStep === 'initial') {\n      if (input.toLowerCase().startsWith('hi')) {\n        setTimeout(() => {\n          addMessage('claura', 'What is your event name?');\n          setChatStep('eventName');\n        }, 1000);\n      } else {\n        addMessage('claura', 'Please say \"hi\" to continue.');\n      }\n      return;\n    }\n\n    if (chatStep === 'eventName') {\n      setEventName(input);\n      await delay(3000);\n      addMessage('claura', `Thanks! Your event name is \"${input}\". What categories do you need? Please select from below.`);\n      setChatStep('categories');\n    } else if (chatStep === 'budget') {\n      if (isNaN(Number(input)) || Number(input) <= 0) {\n        addMessage('claura', 'Please enter a valid positive number for budget.');\n        return;\n      }\n      setBudget(input);\n      addMessage('claura', `Great! Searching companies under budget ${input}...`);\n      setChatStep('results');\n      await fetchCompanies(input, selectedCategories);\n    }\n  };\n\n  const handleCategorySelect = (category) => {\n    let newSelected;\n    if (selectedCategories.includes(category)) {\n      newSelected = selectedCategories.filter(c => c !== category);\n    } else {\n      newSelected = [...selectedCategories, category];\n    }\n    setSelectedCategories(newSelected);\n  };\n\n  const handleCategoriesConfirm = () => {\n    if (selectedCategories.length === 0) {\n      addMessage('claura', 'Please select at least one category.');\n      return;\n    }\n    addMessage('user', `Selected categories: ${selectedCategories.join(', ')}`);\n    addMessage('claura', 'What is your budget? Please enter a number.');\n    setChatStep('budget');\n  };\n\n  const fetchCompanies = async (budgetLimit, categories) => {\n    setLoading(true);\n    try {\n      let q;\n      if (categories.length > 0) {\n        q = query(\n          collection(db, 'postorder'),\n          where('eventname', 'in', categories)\n        );\n      } else {\n        q = query(collection(db, 'postorder'));\n      }\n      const snap = await getDocs(q);\n      let companiesList = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      companiesList = companiesList.filter(c => c.minprice <= Number(budgetLimit));\n      if (companiesList.length === 0) {\n        addMessage('claura', 'No companies found under your budget and selected categories.');\n      } else {\n        addMessage('claura', 'Here are the companies under your budget:');\n        companiesList.forEach(c => {\n          addMessage('claura', `${c.businessname} - Minimum Price: ${c.minprice}`);\n        });\n      }\n    } catch (err) {\n      console.error('Error fetching companies:', err);\n      addMessage('claura', 'Sorry, there was an error fetching companies.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = async (e) => {\n    const qText = e.target.value;\n    setSearchQuery(qText);\n\n    if (!qText) {\n      setCompanies([]);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const q = query(\n        collection(db, 'postorder'),\n        where('businessname', '>=', qText),\n        where('businessname', '<=', qText + '\\uf8ff')\n      );\n      const snap = await getDocs(q);\n      setCompanies(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n    } catch (err) {\n      console.error('Error fetching companies:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (company) => {\n    if (!user) {\n      navigate('/login');\n      setMenuOpen(false);\n      return;\n    }\n    navigate(`/company/${company.id}`);\n    setSearchQuery('');\n    setCompanies([]);\n    setMenuOpen(false);\n  };\n\n  const handleNavClick = (path) => {\n    if (!user) {\n      navigate('/login');\n      setMenuOpen(false);\n      return;\n    }\n    navigate(path);\n    setMenuOpen(false);\n  };\n\n  const handleAiButtonClick = () => {\n    setAiBoxOpen(prev => !prev);\n    if (!aiBoxOpen) {\n      // Reset chat on open\n      setChatMessages([]);\n      setChatStep('initial');\n      setEventName('');\n      setSelectedCategories([]);\n      setBudget('');\n      setUserInput('');\n    }\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-main\">\n        <div className=\"nav-left\">\n          <div className=\"navbar-logo\" onClick={() => navigate('/home')}>Planora</div>\n        </div>\n\n        <div className=\"nav-center\">\n          <div className=\"navbar-search\">\n            <FaSearch className=\"search-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchQuery}\n              onChange={handleSearch}\n            />\n            {searchQuery && (\n              <div className=\"search-results\">\n                {loading ? (\n                  <div className=\"loading\">Loading...</div>\n                ) : companies.length ? (\n                  companies.map((c) => (\n                    <div\n                      key={c.id}\n                      className=\"result-item\"\n                      onClick={() => handleSelect(c)}\n                    >\n                      {c.businessname}\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"no-results\">No matches found</div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"nav-right\">\n          <ul className={`nav-links ${menuOpen ? 'active' : ''}`}>\n            <li onClick={() => handleNavClick('/home')}>Home</li>\n            <li onClick={() => handleNavClick('/orders')}>Orders</li>\n            <li onClick={() => handleNavClick('/post-order')}>Post Order</li>\n            <li onClick={handleAiButtonClick}><FaRobot /> AI</li>\n            <li onClick={() => handleNavClick('/profile')}><FaUser /> Profile</li>\n            <li onClick={() => handleNavClick('/messages')}><FaEnvelope /> Messages</li>\n            <li onClick={() => handleNavClick('/cart')}><FaShoppingCart /> Cart</li>\n          </ul>\n        </div>\n\n        <div className=\"hamburger\" onClick={() => setMenuOpen(prev => !prev)}>\n          {menuOpen ? <FaTimes /> : <FaBars />}\n        </div>\n      </div>\n\n      {aiBoxOpen && (\n        <div className=\"ai-chat-box\">\n          <div className=\"chat-messages\">\n            {chatMessages.map((msg, index) => (\n              <div\n                key={index}\n                className={`chat-message ${msg.sender === 'claura' ? 'claura' : 'user'}`}\n              >\n                {msg.text}\n              </div>\n            ))}\n            <div ref={chatEndRef} />\n          </div>\n          {chatStep === 'categories' ? (\n            <div className=\"categories-buttons\">\n              {categoriesList.map(category => (\n                <button\n                  key={category}\n                  className={selectedCategories.includes(category) ? 'category-btn selected' : 'category-btn'}\n                  onClick={() => handleCategorySelect(category)}\n                >\n                  {category}\n                </button>\n              ))}\n              <button className=\"confirm-btn\" onClick={handleCategoriesConfirm}>Confirm</button>\n            </div>\n          ) : (\n            <>\n              {chatStep === 'budget' ? (\n                <div className=\"budget-slider-container\">\n                <input\n                  type=\"range\"\n                  min=\"500\"\n                  max=\"1000000\"\n                  step=\"100\"\n                  value={budget || 500}\n                  onChange={(e) => setBudget(Number(e.target.value))}\n                />\n                <input\n                  type=\"number\"\n                  min=\"500\"\n                  max=\"1000000\"\n                  step=\"100\"\n                  value={budget || 500}\n                  onChange={(e) => {\n                    let val = Number(e.target.value);\n                    if (val < 500) val = 500;\n                    else if (val > 1000000) val = 1000000;\n                    setBudget(val);\n                  }}\n                  style={{ marginTop: '10px', padding: '5px', borderRadius: '5px', border: 'none', fontSize: '1rem' }}\n                />\n                <div className=\"budget-value\">Selected Budget: {budget || 500}</div>\n                <button className=\"confirm-btn\" onClick={() => {\n                  if (!budget || isNaN(Number(budget)) || Number(budget) < 500) {\n                    addMessage('claura', 'Please select a budget between 500 and 1,000,000.');\n                    return;\n                  }\n                  addMessage('user', `Selected budget: ${budget}`);\n                  addMessage('claura', `Great! Searching companies under budget ${budget}...`);\n                  setChatStep('results');\n                  fetchCompanies(budget, selectedCategories);\n                }}>Confirm</button>\n              </div>\n              ) : (\n                <form className=\"chat-input-form\" onSubmit={handleUserInputSubmit}>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Type your message...\"\n                    value={userInput}\n                    onChange={handleUserInputChange}\n                    autoFocus\n                    disabled={chatStep === 'categories' || chatStep === 'results'}\n                  />\n                  <button type=\"submit\" disabled={chatStep === 'categories' || chatStep === 'results'}>Send</button>\n                </form>\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      <style>{`\n        * {\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n        .navbar {\n          background: #003f66;\n          color: #fff;\n          padding: 0.5rem 1rem;\n          position: sticky;\n          top: 0;\n          z-index: 1000;\n        }\n        .navbar-main {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          flex-wrap: wrap;\n        }\n\n        .nav-left {\n          flex: 1;\n        }\n\n        .nav-center {\n          flex: 2;\n          display: flex;\n          justify-content: center;\n        }\n\n        .nav-right {\n          flex: 2;\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .navbar-logo {\n          font-size: 1.5rem;\n          font-weight: bold;\n          cursor: pointer;\n        }\n\n        .navbar-search {\n          position: relative;\n          width: 100%;\n          max-width: 400px;\n          background: rgba(255,255,255,0.2);\n          border-radius: 20px;\n          display: flex;\n          align-items: center;\n          padding: 0.3rem 0.65rem;\n        }\n\n        .navbar-search input {\n          flex: 1;\n          background: transparent;\n          border: none;\n          color: #fff;\n          margin-left: 0.5rem;\n          font-size: 0.9rem;\n          outline: none;\n        }\n\n        .search-icon {\n          color: #ddd;\n        }\n\n        .search-results {\n          position: absolute;\n          top: 110%;\n          left: 0;\n          width: 100%;\n          background: #fff;\n          color: #333;\n          border-radius: 0 0 10px 10px;\n          box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n          max-height: 200px;\n          overflow-y: auto;\n          z-index: 1001;\n        }\n\n        .result-item, .loading, .no-results {\n          padding: 0.5rem;\n          border-bottom: 1px solid #eee;\n          cursor: pointer;\n        }\n\n        .result-item:hover {\n          background: #f0f0f0;\n        }\n\n        .hamburger {\n          display: none;\n          font-size: 1.5rem;\n          color: #fff;\n          cursor: pointer;\n        }\n\n        .nav-links {\n          list-style: none;\n          display: flex;\n          gap: 1.9rem;\n          align-items: center;\n        }\n\n        .nav-links li {\n          cursor: pointer;\n          padding: 0.5rem;\n          border-radius: 6px;\n          transition: background 0.2s;\n          display: flex;\n          align-items: center;\n          gap: 0.2rem;\n          white-space: nowrap;\n        }\n\n        .nav-links li:hover {\n          background: rgba(255, 255, 255, 0.2);\n        }\n\n        .ai-chat-box {\n          position: absolute;\n          top: 60px;\n          right: 10px;\n          width: 400px;\n          max-height: 600px;\n          background: #ffffff; /* Changed to white background */\n          color: #333333; /* Dark text for contrast */\n          border-radius: 12px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          z-index: 1100;\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        .chat-messages {\n          flex: 1;\n          padding: 1rem;\n          overflow-y: auto;\n          background: #ffffff; /* white background for chat messages */\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n        }\n\n        .chat-message {\n          max-width: 80%;\n          padding: 12px 20px;\n          border-radius: 20px;\n          font-size: 1rem;\n          line-height: 1.4;\n          word-wrap: break-word;\n          white-space: pre-wrap;\n        }\n\n        .chat-message.claura {\n          background: #0078d7; /* bright blue for AI messages */\n          color: #fff;\n          align-self: flex-start;\n          border-bottom-left-radius: 0;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n        }\n\n        .chat-message.user {\n          background: #e1e1e1; /* light gray for user messages */\n          color: #333333;\n          align-self: flex-end;\n          border-bottom-right-radius: 0;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n\n        .chat-input-form {\n          display: flex;\n          padding: 10px;\n          background: #f5f5f5; /* light background for input area */\n          border-top: 1px solid #ddd;\n        }\n\n        .chat-input-form input {\n          flex: 1;\n          border: none;\n          border-radius: 10px;\n          padding: 10px 15px;\n          font-size: 1rem;\n          background: #fff;\n          color: #333;\n          outline: none;\n        }\n\n        .chat-input-form input::placeholder {\n          color: #999;\n        }\n\n        .chat-input-form button {\n          background: #0078d7;\n          border: none;\n          color: white;\n          padding: 0 20px;\n          margin-left: 10px;\n          border-radius: 10px;\n          cursor: pointer;\n          font-size: 1rem;\n          transition: background 0.3s;\n        }\n\n        .chat-input-form button:hover {\n          background: #005a99;\n        }\n\n        .categories-buttons {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 8px;\n          padding: 10px;\n          background: #40414f;\n          border-top: 1px solid #52525b;\n          border-radius: 0 0 15px 15px;\n        }\n\n        .category-btn {\n          background: #303136;\n          color: #fff;\n          border: none;\n          padding: 8px 12px;\n          border-radius: 20px;\n          cursor: pointer;\n          font-size: 0.9rem;\n          transition: background 0.3s;\n        }\n\n        .category-btn.selected {\n          background: #10a37f;\n        }\n\n        .category-btn:hover {\n          background: #50535a;\n        }\n\n        .confirm-btn {\n          background: #10a37f;\n          color: white;\n          border: none;\n          padding: 8px 16px;\n          border-radius: 20px;\n          cursor: pointer;\n          font-size: 0.9rem;\n          margin-left: auto;\n          transition: background 0.3s;\n        }\n\n        .confirm-btn:hover {\n          background: #0e8e6e;\n        }\n\n        @media (max-width: 768px) {\n          .ai-chat-box {\n            width: 90%;\n            right: 5%;\n            bottom: 10px;\n            max-height: 400px;\n          }\n        }\n        .budget-slider-container {\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          background: #40414f;\n          border-top: 1px solid #52525b;\n          border-radius: 0 0 15px 15px;\n          gap: 10px;\n        }\n        .budget-slider-container input[type=\"range\"] {\n          width: 100%;\n          -webkit-appearance: none;\n          height: 8px;\n          border-radius: 5px;\n          background: #303136;\n          outline: none;\n          cursor: pointer;\n        }\n        .budget-slider-container input[type=\"range\"]::-webkit-slider-thumb {\n          -webkit-appearance: none;\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #10a37f;\n          cursor: pointer;\n          border: none;\n          margin-top: -6px;\n        }\n        .budget-slider-container input[type=\"range\"]::-moz-range-thumb {\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #10a37f;\n          cursor: pointer;\n          border: none;\n        }\n        .budget-value {\n          color: #fff;\n          font-size: 1rem;\n          text-align: center;\n        }\n      `}</style>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["styles","container","padding","maxWidth","margin","header","fontSize","marginBottom","color","ordersList","display","flexDirection","gap","orderCard","backgroundColor","borderRadius","boxShadow","chatButton","marginTop","border","cursor","Cart","orders","setOrders","useState","loading","setLoading","user","getAuth","currentUser","navigate","useNavigate","useEffect","async","q","query","collection","db","where","uid","getDocs","docs","map","doc","id","data","err","console","error","fetchOrders","_jsxs","_Fragment","children","_jsx","Navbar","style","length","order","businessname","location","dateofevent","status","onClick","handleChatClick","vendorId","vendorid","businessid","vendorName","encodeURIComponent","categoriesList","searchQuery","setSearchQuery","companies","setCompanies","menuOpen","setMenuOpen","aiBoxOpen","setAiBoxOpen","chatMessages","setChatMessages","sender","text","setChatStep","userInput","setUserInput","chatStep","eventName","setEventName","selectedCategories","setSelectedCategories","budget","setBudget","chatEndRef","useRef","current","scrollIntoView","behavior","addMessage","prev","fetchCompanies","budgetLimit","categories","companiesList","filter","c","minprice","Number","forEach","handleNavClick","path","className","FaSearch","type","placeholder","value","onChange","qText","e","target","snap","company","handleSelect","handleAiButtonClick","FaRobot","FaUser","FaEnvelope","FaShoppingCart","FaTimes","FaBars","msg","index","ref","category","includes","newSelected","handleCategorySelect","handleCategoriesConfirm","join","min","max","step","val","isNaN","onSubmit","preventDefault","input","trim","ms","Promise","res","setTimeout","toLowerCase","startsWith","autoFocus","disabled"],"sourceRoot":""}