{"version":3,"file":"static/js/296.379739c1.chunk.js","mappings":"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","sources":["components/Profile.js","components/Navbar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db } from '../firebase';\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport Navbar from '../components/Navbar'; // âœ… Added Navbar import\n\nconst Profile = () => {\n  const [userData, setUserData] = useState(null);\n  const [editingField, setEditingField] = useState(null);\n  const [fieldValue, setFieldValue] = useState('');\n  const { currentUser, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const userRef = currentUser ? doc(db, 'user', currentUser.uid) : null;\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        if (currentUser && userRef) {\n          const docSnap = await getDoc(userRef);\n          if (docSnap.exists()) {\n            setUserData(docSnap.data());\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      }\n    };\n\n    fetchUserData();\n  }, [currentUser, userRef]);\n\n  const handleEdit = (fieldName) => {\n    setEditingField(fieldName);\n    setFieldValue(userData[fieldName] || '');\n  };\n\n  const handleFieldChange = (e) => {\n    setFieldValue(e.target.value);\n  };\n\n  const handleFieldSave = async () => {\n    try {\n      const updated = { [editingField]: fieldValue };\n      await updateDoc(userRef, updated);\n      setUserData(prev => ({ ...prev, ...updated }));\n      setEditingField(null);\n    } catch (error) {\n      console.error(\"Error updating field:\", error);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate('/login');\n    } catch (error) {\n      console.error('Error logging out:', error);\n    }\n  };\n\n  if (!userData) return <p style={styles.loading}>Loading...</p>;\n\n  const renderField = (label, name, iconClass) => (\n    <div style={styles.infoBox}>\n      <div style={styles.infoHeader}>\n        <i className={`fas ${iconClass}`} style={styles.icon}></i>\n        <span style={styles.label}>{label}</span>\n        <i\n          className=\"fas fa-pen edit-icon\"\n          style={styles.editIcon}\n          onClick={() => handleEdit(name)}\n        ></i>\n      </div>\n      {editingField === name ? (\n        <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n          <input\n            type=\"text\"\n            name={name}\n            value={fieldValue}\n            onChange={handleFieldChange}\n            style={styles.input}\n          />\n          <button onClick={handleFieldSave} style={styles.saveButton}>Save</button>\n        </div>\n      ) : (\n        <div style={styles.infoContent}>{userData[name] || 'N/A'}</div>\n      )}\n    </div>\n  );\n\n  return (\n    <div>\n      <Navbar /> {/* âœ… Navbar rendered here */}\n      <div style={styles.container}>\n        <h1 style={styles.heading}>My Profile</h1>\n        <div style={styles.card}>\n          <img\n            src={userData.profilePicture || '/images/default-profile.jpg'}\n            alt=\"Profile\"\n            style={styles.profileImage}\n          />\n\n          <div style={styles.infoSection}>\n            {renderField('Full Name', 'fullName', 'fa-user')}\n            {renderField('Email', 'email', 'fa-envelope')}\n            {renderField('Phone Number', 'phone', 'fa-phone')}\n            {renderField('Profile Picture URL', 'profilePicture', 'fa-image')}\n          </div>\n\n          <button onClick={handleLogout} style={styles.logoutButton}>Logout</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  container: {\n    padding: '40px',\n    backgroundColor: '#f1f5f9',\n    minHeight: '100vh',\n  },\n  heading: {\n    textAlign: 'center',\n    color: '#005f7f',\n    fontSize: '32px',\n    marginBottom: '20px',\n  },\n  card: {\n    maxWidth: '700px',\n    margin: '0 auto',\n    backgroundColor: '#fff',\n    borderRadius: '12px',\n    padding: '30px',\n    boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\n    textAlign: 'center',\n  },\n  profileImage: {\n    width: '160px',\n    height: '160px',\n    objectFit: 'cover',\n    borderRadius: '50%',\n    marginBottom: '20px',\n    border: '3px solid #005f7f',\n  },\n  infoSection: {\n    marginTop: '20px',\n    textAlign: 'left',\n  },\n  infoBox: {\n    background: '#f9fafb',\n    borderRadius: '10px',\n    padding: '16px',\n    marginBottom: '16px',\n    border: '1px solid #e5e7eb',\n    position: 'relative',\n  },\n  infoHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '8px',\n    fontWeight: '600',\n    fontSize: '16px',\n  },\n  icon: {\n    marginRight: '10px',\n    color: '#005f7f',\n  },\n  editIcon: {\n    marginLeft: 'auto',\n    color: '#005f7f',\n    cursor: 'pointer',\n  },\n  label: {\n    fontSize: '16px',\n  },\n  infoContent: {\n    fontSize: '15px',\n    color: '#374151',\n  },\n  input: {\n    flex: 1,\n    padding: '10px',\n    fontSize: '15px',\n    borderRadius: '8px',\n    border: '1px solid #ccc',\n    outline: 'none',\n  },\n  saveButton: {\n    padding: '8px 12px',\n    fontSize: '14px',\n    borderRadius: '6px',\n    backgroundColor: '#005f7f',\n    color: '#fff',\n    border: 'none',\n    cursor: 'pointer',\n  },\n  logoutButton: {\n    marginTop: '30px',\n    padding: '10px 24px',\n    backgroundColor: '#ff4d4d',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '6px',\n    fontSize: '16px',\n    fontWeight: '600',\n    cursor: 'pointer',\n  },\n  loading: {\n    textAlign: 'center',\n    fontSize: '18px',\n    color: '#005f7f',\n    paddingTop: '40px',\n  },\n};\n\nexport default Profile;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  FaBars,\n  FaTimes,\n  FaSearch,\n  FaShoppingCart,\n  FaUser,\n  FaEnvelope,\n  FaRobot // AI icon\n} from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, orderBy } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\n\nconst categoriesList = [\n  'Photography', 'Food', 'Music', 'Catering', 'Venue', 'Return Gift',\n  'Travel', 'DJ', 'Cakes & Bakery', 'Decoration', 'Orchestra',\n  'Wedding', 'Beautician', 'Other'\n];\n\nconst Navbar = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [aiBoxOpen, setAiBoxOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n\n  useEffect(() => {\n    if (aiBoxOpen && chatMessages.length === 0) {\n      setChatMessages([{ sender: 'claura', text: 'Hi, welcome this is ms.Claura your ai assistant. Say hi to begin' }]);\n      setChatStep('initial');\n    }\n  }, [aiBoxOpen]);\n  const [userInput, setUserInput] = useState('');\n  const [chatStep, setChatStep] = useState('initial'); // initial, waitingForHi, eventName, categories, budget, results\n  const [eventName, setEventName] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [budget, setBudget] = useState('');\n  const chatEndRef = useRef(null);\n  const navigate = useNavigate();\n  const auth = getAuth();\n  const user = auth.currentUser;\n\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatMessages]);\n\n  const addMessage = (sender, text) => {\n    setChatMessages(prev => [...prev, { sender, text }]);\n  };\n\n  const handleUserInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const delay = ms => new Promise(res => setTimeout(res, ms));\n\n  const handleUserInputSubmit = async (e) => {\n    e.preventDefault();\n    const input = userInput.trim();\n    if (!input) return;\n\n    addMessage('user', input);\n    setUserInput('');\n\n    if (chatStep === 'initial') {\n      if (input.toLowerCase().startsWith('hi')) {\n        setTimeout(() => {\n          addMessage('claura', 'What is your event name?');\n          setChatStep('eventName');\n        }, 1000);\n      } else {\n        addMessage('claura', 'Please say \"hi\" to continue.');\n      }\n      return;\n    }\n\n    if (chatStep === 'eventName') {\n      setEventName(input);\n      await delay(3000);\n      addMessage('claura', `Thanks! Your event name is \"${input}\". What categories do you need? Please select from below.`);\n      setChatStep('categories');\n    } else if (chatStep === 'budget') {\n      if (isNaN(Number(input)) || Number(input) <= 0) {\n        addMessage('claura', 'Please enter a valid positive number for budget.');\n        return;\n      }\n      setBudget(input);\n      addMessage('claura', `Great! Searching companies under budget ${input}...`);\n      setChatStep('results');\n      await fetchCompanies(input, selectedCategories);\n    }\n  };\n\n  const handleCategorySelect = (category) => {\n    let newSelected;\n    if (selectedCategories.includes(category)) {\n      newSelected = selectedCategories.filter(c => c !== category);\n    } else {\n      newSelected = [...selectedCategories, category];\n    }\n    setSelectedCategories(newSelected);\n  };\n\n  const handleCategoriesConfirm = () => {\n    if (selectedCategories.length === 0) {\n      addMessage('claura', 'Please select at least one category.');\n      return;\n    }\n    addMessage('user', `Selected categories: ${selectedCategories.join(', ')}`);\n    addMessage('claura', 'What is your budget? Please enter a number.');\n    setChatStep('budget');\n  };\n\n  const fetchCompanies = async (budgetLimit, categories) => {\n    setLoading(true);\n    try {\n      let q;\n      if (categories.length > 0) {\n        q = query(\n          collection(db, 'postorder'),\n          where('eventname', 'in', categories)\n        );\n      } else {\n        q = query(collection(db, 'postorder'));\n      }\n      const snap = await getDocs(q);\n      let companiesList = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      companiesList = companiesList.filter(c => c.minprice <= Number(budgetLimit));\n      if (companiesList.length === 0) {\n        addMessage('claura', 'No companies found under your budget and selected categories.');\n      } else {\n        addMessage('claura', 'Here are the companies under your budget:');\n        companiesList.forEach(c => {\n          addMessage('claura', `${c.businessname} - Minimum Price: ${c.minprice}`);\n        });\n      }\n    } catch (err) {\n      console.error('Error fetching companies:', err);\n      addMessage('claura', 'Sorry, there was an error fetching companies.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = async (e) => {\n    const qText = e.target.value;\n    setSearchQuery(qText);\n\n    if (!qText) {\n      setCompanies([]);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const q = query(\n        collection(db, 'postorder'),\n        where('businessname', '>=', qText),\n        where('businessname', '<=', qText + '\\uf8ff')\n      );\n      const snap = await getDocs(q);\n      setCompanies(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n    } catch (err) {\n      console.error('Error fetching companies:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (company) => {\n    if (!user) {\n      navigate('/login');\n      setMenuOpen(false);\n      return;\n    }\n    navigate(`/company/${company.id}`);\n    setSearchQuery('');\n    setCompanies([]);\n    setMenuOpen(false);\n  };\n\n  const handleNavClick = (path) => {\n    if (!user) {\n      navigate('/login');\n      setMenuOpen(false);\n      return;\n    }\n    navigate(path);\n    setMenuOpen(false);\n  };\n\n  const handleAiButtonClick = () => {\n    setAiBoxOpen(prev => !prev);\n    if (!aiBoxOpen) {\n      // Reset chat on open\n      setChatMessages([]);\n      setChatStep('initial');\n      setEventName('');\n      setSelectedCategories([]);\n      setBudget('');\n      setUserInput('');\n    }\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-main\">\n        <div className=\"nav-left\">\n          <div className=\"navbar-logo\" onClick={() => navigate('/home')}>Planora</div>\n        </div>\n\n        <div className=\"nav-center\">\n          <div className=\"navbar-search\">\n            <FaSearch className=\"search-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchQuery}\n              onChange={handleSearch}\n            />\n            {searchQuery && (\n              <div className=\"search-results\">\n                {loading ? (\n                  <div className=\"loading\">Loading...</div>\n                ) : companies.length ? (\n                  companies.map((c) => (\n                    <div\n                      key={c.id}\n                      className=\"result-item\"\n                      onClick={() => handleSelect(c)}\n                    >\n                      {c.businessname}\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"no-results\">No matches found</div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"nav-right\">\n          <ul className={`nav-links ${menuOpen ? 'active' : ''}`}>\n            <li onClick={() => handleNavClick('/home')}>Home</li>\n            <li onClick={() => handleNavClick('/orders')}>Orders</li>\n            <li onClick={() => handleNavClick('/post-order')}>Post Order</li>\n            <li onClick={handleAiButtonClick}><FaRobot /> AI</li>\n            <li onClick={() => handleNavClick('/profile')}><FaUser /> Profile</li>\n            <li onClick={() => handleNavClick('/messages')}><FaEnvelope /> Messages</li>\n            <li onClick={() => handleNavClick('/cart')}><FaShoppingCart /> Cart</li>\n          </ul>\n        </div>\n\n        <div className=\"hamburger\" onClick={() => setMenuOpen(prev => !prev)}>\n          {menuOpen ? <FaTimes /> : <FaBars />}\n        </div>\n      </div>\n\n      {aiBoxOpen && (\n        <div className=\"ai-chat-box\">\n          <div className=\"chat-messages\">\n            {chatMessages.map((msg, index) => (\n              <div\n                key={index}\n                className={`chat-message ${msg.sender === 'claura' ? 'claura' : 'user'}`}\n              >\n                {msg.text}\n              </div>\n            ))}\n            <div ref={chatEndRef} />\n          </div>\n          {chatStep === 'categories' ? (\n            <div className=\"categories-buttons\">\n              {categoriesList.map(category => (\n                <button\n                  key={category}\n                  className={selectedCategories.includes(category) ? 'category-btn selected' : 'category-btn'}\n                  onClick={() => handleCategorySelect(category)}\n                >\n                  {category}\n                </button>\n              ))}\n              <button className=\"confirm-btn\" onClick={handleCategoriesConfirm}>Confirm</button>\n            </div>\n          ) : (\n            <>\n              {chatStep === 'budget' ? (\n                <div className=\"budget-slider-container\">\n                <input\n                  type=\"range\"\n                  min=\"500\"\n                  max=\"1000000\"\n                  step=\"100\"\n                  value={budget || 500}\n                  onChange={(e) => setBudget(Number(e.target.value))}\n                />\n                <input\n                  type=\"number\"\n                  min=\"500\"\n                  max=\"1000000\"\n                  step=\"100\"\n                  value={budget || 500}\n                  onChange={(e) => {\n                    let val = Number(e.target.value);\n                    if (val < 500) val = 500;\n                    else if (val > 1000000) val = 1000000;\n                    setBudget(val);\n                  }}\n                  style={{ marginTop: '10px', padding: '5px', borderRadius: '5px', border: 'none', fontSize: '1rem' }}\n                />\n                <div className=\"budget-value\">Selected Budget: {budget || 500}</div>\n                <button className=\"confirm-btn\" onClick={() => {\n                  if (!budget || isNaN(Number(budget)) || Number(budget) < 500) {\n                    addMessage('claura', 'Please select a budget between 500 and 1,000,000.');\n                    return;\n                  }\n                  addMessage('user', `Selected budget: ${budget}`);\n                  addMessage('claura', `Great! Searching companies under budget ${budget}...`);\n                  setChatStep('results');\n                  fetchCompanies(budget, selectedCategories);\n                }}>Confirm</button>\n              </div>\n              ) : (\n                <form className=\"chat-input-form\" onSubmit={handleUserInputSubmit}>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Type your message...\"\n                    value={userInput}\n                    onChange={handleUserInputChange}\n                    autoFocus\n                    disabled={chatStep === 'categories' || chatStep === 'results'}\n                  />\n                  <button type=\"submit\" disabled={chatStep === 'categories' || chatStep === 'results'}>Send</button>\n                </form>\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      <style>{`\n        * {\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n        .navbar {\n          background: #003f66;\n          color: #fff;\n          padding: 0.5rem 1rem;\n          position: sticky;\n          top: 0;\n          z-index: 1000;\n        }\n        .navbar-main {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          flex-wrap: wrap;\n        }\n\n        .nav-left {\n          flex: 1;\n        }\n\n        .nav-center {\n          flex: 2;\n          display: flex;\n          justify-content: center;\n        }\n\n        .nav-right {\n          flex: 2;\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .navbar-logo {\n          font-size: 1.5rem;\n          font-weight: bold;\n          cursor: pointer;\n        }\n\n        .navbar-search {\n          position: relative;\n          width: 100%;\n          max-width: 400px;\n          background: rgba(255,255,255,0.2);\n          border-radius: 20px;\n          display: flex;\n          align-items: center;\n          padding: 0.3rem 0.65rem;\n        }\n\n        .navbar-search input {\n          flex: 1;\n          background: transparent;\n          border: none;\n          color: #fff;\n          margin-left: 0.5rem;\n          font-size: 0.9rem;\n          outline: none;\n        }\n\n        .search-icon {\n          color: #ddd;\n        }\n\n        .search-results {\n          position: absolute;\n          top: 110%;\n          left: 0;\n          width: 100%;\n          background: #fff;\n          color: #333;\n          border-radius: 0 0 10px 10px;\n          box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n          max-height: 200px;\n          overflow-y: auto;\n          z-index: 1001;\n        }\n\n        .result-item, .loading, .no-results {\n          padding: 0.5rem;\n          border-bottom: 1px solid #eee;\n          cursor: pointer;\n        }\n\n        .result-item:hover {\n          background: #f0f0f0;\n        }\n\n        .hamburger {\n          display: none;\n          font-size: 1.5rem;\n          color: #fff;\n          cursor: pointer;\n        }\n\n        .nav-links {\n          list-style: none;\n          display: flex;\n          gap: 1.9rem;\n          align-items: center;\n        }\n\n        .nav-links li {\n          cursor: pointer;\n          padding: 0.5rem;\n          border-radius: 6px;\n          transition: background 0.2s;\n          display: flex;\n          align-items: center;\n          gap: 0.2rem;\n          white-space: nowrap;\n        }\n\n        .nav-links li:hover {\n          background: rgba(255, 255, 255, 0.2);\n        }\n\n        .ai-chat-box {\n          position: absolute;\n          top: 60px;\n          right: 10px;\n          width: 400px;\n          max-height: 600px;\n          background: #ffffff; /* Changed to white background */\n          color: #333333; /* Dark text for contrast */\n          border-radius: 12px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          z-index: 1100;\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        .chat-messages {\n          flex: 1;\n          padding: 1rem;\n          overflow-y: auto;\n          background: #ffffff; /* white background for chat messages */\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n        }\n\n        .chat-message {\n          max-width: 80%;\n          padding: 12px 20px;\n          border-radius: 20px;\n          font-size: 1rem;\n          line-height: 1.4;\n          word-wrap: break-word;\n          white-space: pre-wrap;\n        }\n\n        .chat-message.claura {\n          background: #0078d7; /* bright blue for AI messages */\n          color: #fff;\n          align-self: flex-start;\n          border-bottom-left-radius: 0;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n        }\n\n        .chat-message.user {\n          background: #e1e1e1; /* light gray for user messages */\n          color: #333333;\n          align-self: flex-end;\n          border-bottom-right-radius: 0;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n\n        .chat-input-form {\n          display: flex;\n          padding: 10px;\n          background: #f5f5f5; /* light background for input area */\n          border-top: 1px solid #ddd;\n        }\n\n        .chat-input-form input {\n          flex: 1;\n          border: none;\n          border-radius: 10px;\n          padding: 10px 15px;\n          font-size: 1rem;\n          background: #fff;\n          color: #333;\n          outline: none;\n        }\n\n        .chat-input-form input::placeholder {\n          color: #999;\n        }\n\n        .chat-input-form button {\n          background: #0078d7;\n          border: none;\n          color: white;\n          padding: 0 20px;\n          margin-left: 10px;\n          border-radius: 10px;\n          cursor: pointer;\n          font-size: 1rem;\n          transition: background 0.3s;\n        }\n\n        .chat-input-form button:hover {\n          background: #005a99;\n        }\n\n        .categories-buttons {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 8px;\n          padding: 10px;\n          background: #40414f;\n          border-top: 1px solid #52525b;\n          border-radius: 0 0 15px 15px;\n        }\n\n        .category-btn {\n          background: #303136;\n          color: #fff;\n          border: none;\n          padding: 8px 12px;\n          border-radius: 20px;\n          cursor: pointer;\n          font-size: 0.9rem;\n          transition: background 0.3s;\n        }\n\n        .category-btn.selected {\n          background: #10a37f;\n        }\n\n        .category-btn:hover {\n          background: #50535a;\n        }\n\n        .confirm-btn {\n          background: #10a37f;\n          color: white;\n          border: none;\n          padding: 8px 16px;\n          border-radius: 20px;\n          cursor: pointer;\n          font-size: 0.9rem;\n          margin-left: auto;\n          transition: background 0.3s;\n        }\n\n        .confirm-btn:hover {\n          background: #0e8e6e;\n        }\n\n        @media (max-width: 768px) {\n          .ai-chat-box {\n            width: 90%;\n            right: 5%;\n            bottom: 10px;\n            max-height: 400px;\n          }\n        }\n        .budget-slider-container {\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          background: #40414f;\n          border-top: 1px solid #52525b;\n          border-radius: 0 0 15px 15px;\n          gap: 10px;\n        }\n        .budget-slider-container input[type=\"range\"] {\n          width: 100%;\n          -webkit-appearance: none;\n          height: 8px;\n          border-radius: 5px;\n          background: #303136;\n          outline: none;\n          cursor: pointer;\n        }\n        .budget-slider-container input[type=\"range\"]::-webkit-slider-thumb {\n          -webkit-appearance: none;\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #10a37f;\n          cursor: pointer;\n          border: none;\n          margin-top: -6px;\n        }\n        .budget-slider-container input[type=\"range\"]::-moz-range-thumb {\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #10a37f;\n          cursor: pointer;\n          border: none;\n        }\n        .budget-value {\n          color: #fff;\n          font-size: 1rem;\n          text-align: center;\n        }\n      `}</style>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["styles","container","padding","backgroundColor","minHeight","heading","textAlign","color","fontSize","marginBottom","card","maxWidth","margin","borderRadius","boxShadow","profileImage","width","height","objectFit","border","infoSection","marginTop","infoBox","background","position","infoHeader","display","alignItems","fontWeight","icon","marginRight","editIcon","marginLeft","cursor","label","infoContent","input","flex","outline","saveButton","logoutButton","loading","paddingTop","Profile","userData","setUserData","useState","editingField","setEditingField","fieldValue","setFieldValue","currentUser","logout","useAuth","navigate","useNavigate","userRef","doc","db","uid","useEffect","async","docSnap","getDoc","exists","data","error","console","fetchUserData","handleFieldChange","e","target","value","handleFieldSave","updated","updateDoc","prev","_jsx","style","children","renderField","name","iconClass","_jsxs","className","onClick","handleEdit","fieldName","gap","type","onChange","Navbar","src","profilePicture","alt","categoriesList","searchQuery","setSearchQuery","companies","setCompanies","setLoading","menuOpen","setMenuOpen","aiBoxOpen","setAiBoxOpen","chatMessages","setChatMessages","length","sender","text","setChatStep","userInput","setUserInput","chatStep","eventName","setEventName","selectedCategories","setSelectedCategories","budget","setBudget","chatEndRef","useRef","user","getAuth","current","scrollIntoView","behavior","addMessage","fetchCompanies","budgetLimit","categories","q","query","collection","where","companiesList","getDocs","docs","map","id","filter","c","minprice","Number","forEach","businessname","err","handleNavClick","path","FaSearch","placeholder","qText","snap","company","handleSelect","handleAiButtonClick","FaRobot","FaUser","FaEnvelope","FaShoppingCart","FaTimes","FaBars","msg","index","ref","category","includes","newSelected","handleCategorySelect","handleCategoriesConfirm","join","_Fragment","min","max","step","val","isNaN","onSubmit","preventDefault","trim","ms","Promise","res","setTimeout","toLowerCase","startsWith","autoFocus","disabled"],"sourceRoot":""}