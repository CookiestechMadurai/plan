{"version":3,"file":"static/js/215.795e4e22.chunk.js","mappings":"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","sources":["pages/MessagePage.js","components/Navbar.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  collection,\n  query,\n  where,\n  orderBy,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  doc,\n  serverTimestamp,\n  limit,\n  getDoc,\n} from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { getAuth } from 'firebase/auth';\nimport Navbar from '../components/Navbar';\n\nconst MessagePage = () => {\n  const [senders, setSenders] = useState([]);\n  const [selectedSender, setSelectedSender] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [fullName, setFullName] = useState('');\n  const auth = getAuth();\n  const currentUser = auth.currentUser;\n  const chatEndRef = useRef(null);\n  const location = useLocation();\n\n  // Get query params from URL and set selected sender\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const vendorId = searchParams.get('vendorId');\n    const vendorName = searchParams.get('vendorName');\n\n    if (vendorId && vendorName) {\n      setSelectedSender({ senderId: vendorId, senderName: vendorName });\n    }\n  }, [location.search]);\n\n  useEffect(() => {\n    const fetchFullName = async () => {\n      if (!currentUser) return;\n      const userDocRef = doc(db, 'user', currentUser.uid);\n      const userDocSnap = await getDoc(userDocRef);\n      if (userDocSnap.exists()) {\n        const userData = userDocSnap.data();\n        setFullName(userData.fullName || '');\n      }\n    };\n    fetchFullName();\n  }, [currentUser]);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatMessages]);\n\n  useEffect(() => {\n    if (!currentUser) return;\n    const unsub = onSnapshot(\n      query(\n        collection(db, 'webchat'),\n        where('receiverId', '==', currentUser.uid)\n      ),\n      snap => {\n        const msgs = snap.docs.map(d => d.data());\n        const unique = Array.from(\n          new Map(msgs.map(m => [m.senderId, m])).values()\n        );\n        setSenders(unique);\n      }\n    );\n    return unsub;\n  }, [currentUser]);\n\n  useEffect(() => {\n    if (!selectedSender || !currentUser) return;\n    const q = query(\n      collection(db, 'webchat'),\n      where('senderId', 'in', [currentUser.uid, selectedSender.senderId]),\n      where('receiverId', 'in', [currentUser.uid, selectedSender.senderId]),\n      orderBy('time'),\n      limit(50)\n    );\n    const unsub = onSnapshot(q, snap => {\n      const msgs = snap.docs.map(d => ({ id: d.id, ...d.data() }));\n      setChatMessages(msgs);\n      snap.docs.forEach(async d => {\n        const m = d.data();\n        if (m.receiverId === currentUser.uid && m.status !== 'seen') {\n          await updateDoc(doc(db, 'webchat', d.id), { status: 'seen' });\n        }\n      });\n    });\n    return unsub;\n  }, [selectedSender, currentUser]);\n\n  const sendMessage = useCallback(async () => {\n    if (!newMessage.trim() || !currentUser || !selectedSender) return;\n    await addDoc(collection(db, 'webchat'), {\n      senderId: currentUser.uid,\n      receiverId: selectedSender.senderId,\n      senderName: fullName || 'Anonymous',\n      receiverName: selectedSender.senderName,\n      message: newMessage.trim(),\n      time: serverTimestamp(),\n      status: 'sent',\n    });\n    setNewMessage('');\n  }, [newMessage, currentUser, selectedSender, fullName]);\n\n  const fmtTime = ts =>\n    ts?.toDate().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n\n  return (\n    <div style={styles.pageWrapper}>\n      <Navbar />\n      <div style={styles.container}>\n        <div style={styles.sidebar}>\n          <h3 style={styles.sidebarHeader}>Chats</h3>\n          {senders.map(s => (\n            <div\n              key={s.senderId}\n              style={{\n                ...styles.contact,\n                backgroundColor:\n                  selectedSender?.senderId === s.senderId ? '#e6f7ff' : '#ffffff',\n              }}\n              onClick={() => setSelectedSender(s)}\n            >\n              {s.senderName}\n            </div>\n          ))}\n        </div>\n\n        <div style={styles.chatbox}>\n          {selectedSender ? (\n            <>\n              <div style={styles.chatHeader}>\n                Chat with <strong>{selectedSender.senderName}</strong>\n              </div>\n              <div style={styles.chatBody}>\n                {chatMessages.map(msg => {\n                  const mine = msg.senderId === currentUser.uid;\n                  return (\n                    <div\n                      key={msg.id}\n                      style={{\n                        ...styles.messageBubble,\n                        alignSelf: mine ? 'flex-end' : 'flex-start',\n                        backgroundColor: mine ? '#dcf8c6' : '#ffffff',\n                      }}\n                    >\n                      <p style={styles.messageText}>{msg.message}</p>\n                      <div style={styles.messageMeta}>\n                        <span style={styles.metaName}>{msg.senderName}</span>\n                        <span style={styles.metaTime}>{fmtTime(msg.time)}</span>\n                        {mine && (\n                          <span style={styles.metaStatus}>\n                            {msg.status === 'sent' && '✓'}\n                            {msg.status === 'delivered' && '✓✓'}\n                            {msg.status === 'seen' && (\n                              <span style={{ color: '#34B7F1' }}>✓✓</span>\n                            )}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n                <div ref={chatEndRef} />\n              </div>\n              <div style={styles.chatInput}>\n                <input\n                  style={styles.input}\n                  placeholder=\"Type a message...\"\n                  value={newMessage}\n                  onChange={e => setNewMessage(e.target.value)}\n                  onKeyDown={e => e.key === 'Enter' && sendMessage()}\n                />\n                <button style={styles.sendBtn} onClick={sendMessage}>\n                  Send\n                </button>\n              </div>\n            </>\n          ) : (\n            <div style={styles.noChat}>Select a user to start chatting</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  pageWrapper: {\n    backgroundColor: '#003f66',\n    minHeight: '100vh',\n    padding: '20px',\n  },\n  container: {\n    display: 'flex',\n    height: 'calc(100vh - 40px)',\n    borderRadius: '12px',\n    overflow: 'hidden',\n    boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\n    backgroundColor: '#ffffff',\n    marginTop: '60px',\n  },\n  sidebar: {\n    width: '30%',\n    borderRight: '1px solid #ddd',\n    backgroundColor: '#f9f9f9',\n    overflowY: 'auto',\n  },\n  sidebarHeader: {\n    margin: 0,\n    padding: '16px',\n    borderBottom: '1px solid #ddd',\n    fontSize: '18px',\n    backgroundColor: '#e6f7ff',\n    color: '#003f66',\n  },\n  contact: {\n    padding: '12px 16px',\n    cursor: 'pointer',\n    borderBottom: '1px solid #eee',\n    color: '#003f66',\n  },\n  chatbox: {\n    width: '70%',\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fafafa',\n  },\n  chatHeader: {\n    padding: '16px',\n    backgroundColor: '#e6f7ff',\n    borderBottom: '1px solid #ddd',\n    color: '#003f66',\n    fontWeight: '600',\n  },\n  chatBody: {\n    flex: 1,\n    padding: '16px',\n    overflowY: 'auto',\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '12px',\n  },\n  messageBubble: {\n    maxWidth: '60%',\n    padding: '12px',\n    borderRadius: '12px',\n    boxShadow: '0 1px 2px rgba(0,0,0,0.1)',\n  },\n  messageText: {\n    margin: 0,\n    color: '#333',\n  },\n  messageMeta: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    gap: '8px',\n    marginTop: '6px',\n    fontSize: '12px',\n    color: '#555',\n  },\n  metaName: { fontWeight: '500' },\n  metaTime: {},\n  metaStatus: { fontSize: '14px' },\n  chatInput: {\n    display: 'flex',\n    borderTop: '1px solid #ddd',\n    padding: '12px',\n    backgroundColor: '#fff',\n  },\n  input: {\n    flex: 1,\n    padding: '10px 14px',\n    borderRadius: '20px',\n    border: '1px solid #ccc',\n    outline: 'none',\n    marginRight: '12px',\n  },\n  sendBtn: {\n    padding: '10px 18px',\n    backgroundColor: '#25D366',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '20px',\n    cursor: 'pointer',\n  },\n  noChat: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: '#777',\n    fontSize: '16px',\n  },\n};\n\nexport default MessagePage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  FaBars,\n  FaTimes,\n  FaSearch,\n  FaShoppingCart,\n  FaUser,\n  FaEnvelope,\n  FaRobot // AI icon\n} from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, orderBy } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\n\nconst categoriesList = [\n  'Photography', 'Food', 'Music', 'Catering', 'Venue', 'Return Gift',\n  'Travel', 'DJ', 'Cakes & Bakery', 'Decoration', 'Orchestra',\n  'Wedding', 'Beautician', 'Other'\n];\n\nconst Navbar = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [aiBoxOpen, setAiBoxOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n\n  useEffect(() => {\n    if (aiBoxOpen && chatMessages.length === 0) {\n      setChatMessages([{ sender: 'claura', text: 'Hi, welcome this is ms.Claura your ai assistant. Say hi to begin' }]);\n      setChatStep('initial');\n    }\n  }, [aiBoxOpen]);\n  const [userInput, setUserInput] = useState('');\n  const [chatStep, setChatStep] = useState('initial'); // initial, waitingForHi, eventName, categories, budget, results\n  const [eventName, setEventName] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [budget, setBudget] = useState('');\n  const chatEndRef = useRef(null);\n  const navigate = useNavigate();\n  const auth = getAuth();\n  const user = auth.currentUser;\n\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [chatMessages]);\n\n  const addMessage = (sender, text) => {\n    setChatMessages(prev => [...prev, { sender, text }]);\n  };\n\n  const handleUserInputChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const delay = ms => new Promise(res => setTimeout(res, ms));\n\n  const handleUserInputSubmit = async (e) => {\n    e.preventDefault();\n    const input = userInput.trim();\n    if (!input) return;\n\n    addMessage('user', input);\n    setUserInput('');\n\n    if (chatStep === 'initial') {\n      if (input.toLowerCase().startsWith('hi')) {\n        setTimeout(() => {\n          addMessage('claura', 'What is your event name?');\n          setChatStep('eventName');\n        }, 1000);\n      } else {\n        addMessage('claura', 'Please say \"hi\" to continue.');\n      }\n      return;\n    }\n\n    if (chatStep === 'eventName') {\n      setEventName(input);\n      await delay(3000);\n      addMessage('claura', `Thanks! Your event name is \"${input}\". What categories do you need? Please select from below.`);\n      setChatStep('categories');\n    } else if (chatStep === 'budget') {\n      if (isNaN(Number(input)) || Number(input) <= 0) {\n        addMessage('claura', 'Please enter a valid positive number for budget.');\n        return;\n      }\n      setBudget(input);\n      addMessage('claura', `Great! Searching companies under budget ${input}...`);\n      setChatStep('results');\n      await fetchCompanies(input, selectedCategories);\n    }\n  };\n\n  const handleCategorySelect = (category) => {\n    let newSelected;\n    if (selectedCategories.includes(category)) {\n      newSelected = selectedCategories.filter(c => c !== category);\n    } else {\n      newSelected = [...selectedCategories, category];\n    }\n    setSelectedCategories(newSelected);\n  };\n\n  const handleCategoriesConfirm = () => {\n    if (selectedCategories.length === 0) {\n      addMessage('claura', 'Please select at least one category.');\n      return;\n    }\n    addMessage('user', `Selected categories: ${selectedCategories.join(', ')}`);\n    addMessage('claura', 'What is your budget? Please enter a number.');\n    setChatStep('budget');\n  };\n\n  const fetchCompanies = async (budgetLimit, categories) => {\n    setLoading(true);\n    try {\n      let q;\n      if (categories.length > 0) {\n        q = query(\n          collection(db, 'postorder'),\n          where('eventname', 'in', categories)\n        );\n      } else {\n        q = query(collection(db, 'postorder'));\n      }\n      const snap = await getDocs(q);\n      let companiesList = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      companiesList = companiesList.filter(c => c.minprice <= Number(budgetLimit));\n      if (companiesList.length === 0) {\n        addMessage('claura', 'No companies found under your budget and selected categories.');\n      } else {\n        addMessage('claura', 'Here are the companies under your budget:');\n        companiesList.forEach(c => {\n          addMessage('claura', `${c.businessname} - Minimum Price: ${c.minprice}`);\n        });\n      }\n    } catch (err) {\n      console.error('Error fetching companies:', err);\n      addMessage('claura', 'Sorry, there was an error fetching companies.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = async (e) => {\n    const qText = e.target.value;\n    setSearchQuery(qText);\n\n    if (!qText) {\n      setCompanies([]);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const q = query(\n        collection(db, 'postorder'),\n        where('businessname', '>=', qText),\n        where('businessname', '<=', qText + '\\uf8ff')\n      );\n      const snap = await getDocs(q);\n      setCompanies(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n    } catch (err) {\n      console.error('Error fetching companies:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (company) => {\n    if (!user) {\n      navigate('/login');\n      setMenuOpen(false);\n      return;\n    }\n    navigate(`/company/${company.id}`);\n    setSearchQuery('');\n    setCompanies([]);\n    setMenuOpen(false);\n  };\n\n  const handleNavClick = (path) => {\n    if (!user) {\n      navigate('/login');\n      setMenuOpen(false);\n      return;\n    }\n    navigate(path);\n    setMenuOpen(false);\n  };\n\n  const handleAiButtonClick = () => {\n    setAiBoxOpen(prev => !prev);\n    if (!aiBoxOpen) {\n      // Reset chat on open\n      setChatMessages([]);\n      setChatStep('initial');\n      setEventName('');\n      setSelectedCategories([]);\n      setBudget('');\n      setUserInput('');\n    }\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-main\">\n        <div className=\"nav-left\">\n          <div className=\"navbar-logo\" onClick={() => navigate('/home')}>Planora</div>\n        </div>\n\n        <div className=\"nav-center\">\n          <div className=\"navbar-search\">\n            <FaSearch className=\"search-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchQuery}\n              onChange={handleSearch}\n            />\n            {searchQuery && (\n              <div className=\"search-results\">\n                {loading ? (\n                  <div className=\"loading\">Loading...</div>\n                ) : companies.length ? (\n                  companies.map((c) => (\n                    <div\n                      key={c.id}\n                      className=\"result-item\"\n                      onClick={() => handleSelect(c)}\n                    >\n                      {c.businessname}\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"no-results\">No matches found</div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"nav-right\">\n          <ul className={`nav-links ${menuOpen ? 'active' : ''}`}>\n            <li onClick={() => handleNavClick('/home')}>Home</li>\n            <li onClick={() => handleNavClick('/orders')}>Orders</li>\n            <li onClick={() => handleNavClick('/post-order')}>Post Order</li>\n            <li onClick={handleAiButtonClick}><FaRobot /> AI</li>\n            <li onClick={() => handleNavClick('/profile')}><FaUser /> Profile</li>\n            <li onClick={() => handleNavClick('/messages')}><FaEnvelope /> Messages</li>\n            <li onClick={() => handleNavClick('/cart')}><FaShoppingCart /> Cart</li>\n          </ul>\n        </div>\n\n        <div className=\"hamburger\" onClick={() => setMenuOpen(prev => !prev)}>\n          {menuOpen ? <FaTimes /> : <FaBars />}\n        </div>\n      </div>\n\n      {aiBoxOpen && (\n        <div className=\"ai-chat-box\">\n          <div className=\"chat-messages\">\n            {chatMessages.map((msg, index) => (\n              <div\n                key={index}\n                className={`chat-message ${msg.sender === 'claura' ? 'claura' : 'user'}`}\n              >\n                {msg.text}\n              </div>\n            ))}\n            <div ref={chatEndRef} />\n          </div>\n          {chatStep === 'categories' ? (\n            <div className=\"categories-buttons\">\n              {categoriesList.map(category => (\n                <button\n                  key={category}\n                  className={selectedCategories.includes(category) ? 'category-btn selected' : 'category-btn'}\n                  onClick={() => handleCategorySelect(category)}\n                >\n                  {category}\n                </button>\n              ))}\n              <button className=\"confirm-btn\" onClick={handleCategoriesConfirm}>Confirm</button>\n            </div>\n          ) : (\n            <>\n              {chatStep === 'budget' ? (\n                <div className=\"budget-slider-container\">\n                <input\n                  type=\"range\"\n                  min=\"500\"\n                  max=\"1000000\"\n                  step=\"100\"\n                  value={budget || 500}\n                  onChange={(e) => setBudget(Number(e.target.value))}\n                />\n                <input\n                  type=\"number\"\n                  min=\"500\"\n                  max=\"1000000\"\n                  step=\"100\"\n                  value={budget || 500}\n                  onChange={(e) => {\n                    let val = Number(e.target.value);\n                    if (val < 500) val = 500;\n                    else if (val > 1000000) val = 1000000;\n                    setBudget(val);\n                  }}\n                  style={{ marginTop: '10px', padding: '5px', borderRadius: '5px', border: 'none', fontSize: '1rem' }}\n                />\n                <div className=\"budget-value\">Selected Budget: {budget || 500}</div>\n                <button className=\"confirm-btn\" onClick={() => {\n                  if (!budget || isNaN(Number(budget)) || Number(budget) < 500) {\n                    addMessage('claura', 'Please select a budget between 500 and 1,000,000.');\n                    return;\n                  }\n                  addMessage('user', `Selected budget: ${budget}`);\n                  addMessage('claura', `Great! Searching companies under budget ${budget}...`);\n                  setChatStep('results');\n                  fetchCompanies(budget, selectedCategories);\n                }}>Confirm</button>\n              </div>\n              ) : (\n                <form className=\"chat-input-form\" onSubmit={handleUserInputSubmit}>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Type your message...\"\n                    value={userInput}\n                    onChange={handleUserInputChange}\n                    autoFocus\n                    disabled={chatStep === 'categories' || chatStep === 'results'}\n                  />\n                  <button type=\"submit\" disabled={chatStep === 'categories' || chatStep === 'results'}>Send</button>\n                </form>\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      <style>{`\n        * {\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n        .navbar {\n          background: #003f66;\n          color: #fff;\n          padding: 0.5rem 1rem;\n          position: sticky;\n          top: 0;\n          z-index: 1000;\n        }\n        .navbar-main {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          flex-wrap: wrap;\n        }\n\n        .nav-left {\n          flex: 1;\n        }\n\n        .nav-center {\n          flex: 2;\n          display: flex;\n          justify-content: center;\n        }\n\n        .nav-right {\n          flex: 2;\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .navbar-logo {\n          font-size: 1.5rem;\n          font-weight: bold;\n          cursor: pointer;\n        }\n\n        .navbar-search {\n          position: relative;\n          width: 100%;\n          max-width: 400px;\n          background: rgba(255,255,255,0.2);\n          border-radius: 20px;\n          display: flex;\n          align-items: center;\n          padding: 0.3rem 0.65rem;\n        }\n\n        .navbar-search input {\n          flex: 1;\n          background: transparent;\n          border: none;\n          color: #fff;\n          margin-left: 0.5rem;\n          font-size: 0.9rem;\n          outline: none;\n        }\n\n        .search-icon {\n          color: #ddd;\n        }\n\n        .search-results {\n          position: absolute;\n          top: 110%;\n          left: 0;\n          width: 100%;\n          background: #fff;\n          color: #333;\n          border-radius: 0 0 10px 10px;\n          box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n          max-height: 200px;\n          overflow-y: auto;\n          z-index: 1001;\n        }\n\n        .result-item, .loading, .no-results {\n          padding: 0.5rem;\n          border-bottom: 1px solid #eee;\n          cursor: pointer;\n        }\n\n        .result-item:hover {\n          background: #f0f0f0;\n        }\n\n        .hamburger {\n          display: none;\n          font-size: 1.5rem;\n          color: #fff;\n          cursor: pointer;\n        }\n\n        .nav-links {\n          list-style: none;\n          display: flex;\n          gap: 1.9rem;\n          align-items: center;\n        }\n\n        .nav-links li {\n          cursor: pointer;\n          padding: 0.5rem;\n          border-radius: 6px;\n          transition: background 0.2s;\n          display: flex;\n          align-items: center;\n          gap: 0.2rem;\n          white-space: nowrap;\n        }\n\n        .nav-links li:hover {\n          background: rgba(255, 255, 255, 0.2);\n        }\n\n        .ai-chat-box {\n          position: absolute;\n          top: 60px;\n          right: 10px;\n          width: 400px;\n          max-height: 600px;\n          background: #ffffff; /* Changed to white background */\n          color: #333333; /* Dark text for contrast */\n          border-radius: 12px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          z-index: 1100;\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        .chat-messages {\n          flex: 1;\n          padding: 1rem;\n          overflow-y: auto;\n          background: #ffffff; /* white background for chat messages */\n          display: flex;\n          flex-direction: column;\n          gap: 10px;\n        }\n\n        .chat-message {\n          max-width: 80%;\n          padding: 12px 20px;\n          border-radius: 20px;\n          font-size: 1rem;\n          line-height: 1.4;\n          word-wrap: break-word;\n          white-space: pre-wrap;\n        }\n\n        .chat-message.claura {\n          background: #0078d7; /* bright blue for AI messages */\n          color: #fff;\n          align-self: flex-start;\n          border-bottom-left-radius: 0;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n        }\n\n        .chat-message.user {\n          background: #e1e1e1; /* light gray for user messages */\n          color: #333333;\n          align-self: flex-end;\n          border-bottom-right-radius: 0;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n\n        .chat-input-form {\n          display: flex;\n          padding: 10px;\n          background: #f5f5f5; /* light background for input area */\n          border-top: 1px solid #ddd;\n        }\n\n        .chat-input-form input {\n          flex: 1;\n          border: none;\n          border-radius: 10px;\n          padding: 10px 15px;\n          font-size: 1rem;\n          background: #fff;\n          color: #333;\n          outline: none;\n        }\n\n        .chat-input-form input::placeholder {\n          color: #999;\n        }\n\n        .chat-input-form button {\n          background: #0078d7;\n          border: none;\n          color: white;\n          padding: 0 20px;\n          margin-left: 10px;\n          border-radius: 10px;\n          cursor: pointer;\n          font-size: 1rem;\n          transition: background 0.3s;\n        }\n\n        .chat-input-form button:hover {\n          background: #005a99;\n        }\n\n        .categories-buttons {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 8px;\n          padding: 10px;\n          background: #40414f;\n          border-top: 1px solid #52525b;\n          border-radius: 0 0 15px 15px;\n        }\n\n        .category-btn {\n          background: #303136;\n          color: #fff;\n          border: none;\n          padding: 8px 12px;\n          border-radius: 20px;\n          cursor: pointer;\n          font-size: 0.9rem;\n          transition: background 0.3s;\n        }\n\n        .category-btn.selected {\n          background: #10a37f;\n        }\n\n        .category-btn:hover {\n          background: #50535a;\n        }\n\n        .confirm-btn {\n          background: #10a37f;\n          color: white;\n          border: none;\n          padding: 8px 16px;\n          border-radius: 20px;\n          cursor: pointer;\n          font-size: 0.9rem;\n          margin-left: auto;\n          transition: background 0.3s;\n        }\n\n        .confirm-btn:hover {\n          background: #0e8e6e;\n        }\n\n        @media (max-width: 768px) {\n          .ai-chat-box {\n            width: 90%;\n            right: 5%;\n            bottom: 10px;\n            max-height: 400px;\n          }\n        }\n        .budget-slider-container {\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          background: #40414f;\n          border-top: 1px solid #52525b;\n          border-radius: 0 0 15px 15px;\n          gap: 10px;\n        }\n        .budget-slider-container input[type=\"range\"] {\n          width: 100%;\n          -webkit-appearance: none;\n          height: 8px;\n          border-radius: 5px;\n          background: #303136;\n          outline: none;\n          cursor: pointer;\n        }\n        .budget-slider-container input[type=\"range\"]::-webkit-slider-thumb {\n          -webkit-appearance: none;\n          appearance: none;\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #10a37f;\n          cursor: pointer;\n          border: none;\n          margin-top: -6px;\n        }\n        .budget-slider-container input[type=\"range\"]::-moz-range-thumb {\n          width: 20px;\n          height: 20px;\n          border-radius: 50%;\n          background: #10a37f;\n          cursor: pointer;\n          border: none;\n        }\n        .budget-value {\n          color: #fff;\n          font-size: 1rem;\n          text-align: center;\n        }\n      `}</style>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["styles","pageWrapper","backgroundColor","minHeight","padding","container","display","height","borderRadius","overflow","boxShadow","marginTop","sidebar","width","borderRight","overflowY","sidebarHeader","margin","borderBottom","fontSize","color","contact","cursor","chatbox","flexDirection","chatHeader","fontWeight","chatBody","flex","gap","messageBubble","maxWidth","messageText","messageMeta","justifyContent","alignItems","metaName","metaTime","metaStatus","chatInput","borderTop","input","border","outline","marginRight","sendBtn","noChat","MessagePage","senders","setSenders","useState","selectedSender","setSelectedSender","chatMessages","setChatMessages","newMessage","setNewMessage","fullName","setFullName","currentUser","getAuth","chatEndRef","useRef","location","useLocation","useEffect","searchParams","URLSearchParams","search","vendorId","get","vendorName","senderId","senderName","async","userDocRef","doc","db","uid","userDocSnap","getDoc","exists","userData","data","fetchFullName","_chatEndRef$current","current","scrollIntoView","behavior","onSnapshot","query","collection","where","snap","msgs","docs","map","d","unique","Array","from","Map","m","values","q","orderBy","limit","id","forEach","receiverId","status","updateDoc","sendMessage","useCallback","trim","addDoc","receiverName","message","time","serverTimestamp","_jsxs","style","children","_jsx","Navbar","s","onClick","_Fragment","msg","mine","alignSelf","ts","toDate","toLocaleTimeString","hour","minute","ref","placeholder","value","onChange","e","target","onKeyDown","key","categoriesList","searchQuery","setSearchQuery","companies","setCompanies","loading","setLoading","menuOpen","setMenuOpen","aiBoxOpen","setAiBoxOpen","length","sender","text","setChatStep","userInput","setUserInput","chatStep","eventName","setEventName","selectedCategories","setSelectedCategories","budget","setBudget","navigate","useNavigate","user","addMessage","prev","fetchCompanies","budgetLimit","categories","companiesList","getDocs","filter","c","minprice","Number","businessname","err","console","error","handleNavClick","path","className","FaSearch","type","qText","company","handleSelect","handleAiButtonClick","FaRobot","FaUser","FaEnvelope","FaShoppingCart","FaTimes","FaBars","index","category","includes","newSelected","handleCategorySelect","handleCategoriesConfirm","join","min","max","step","val","isNaN","onSubmit","preventDefault","ms","Promise","res","setTimeout","toLowerCase","startsWith","autoFocus","disabled"],"sourceRoot":""}